// Code generated by github.com/DenChenn/blunder. DO NOT EDIT.

package svcerr

import (
	. "github.com/DenChenn/blunder/pkg/blunder"
)

var (
	ErrTextQueryParamMissing = &svcerr{
		Id:             "e1c0a36aef2410b84e55417102bbba2f",
		HttpStatusCode: 400,
		GrpcStatusCode: 3,
		ErrorCode:      "ErrTextQueryParamMissing",
		Message:        "Text query parameter is missing",
	}
	ErrPlaceQueryParamMissing = &svcerr{
		Id:             "15d6b378ce2ec3ba42e4399fd6c99cfe",
		HttpStatusCode: 400,
		GrpcStatusCode: 3,
		ErrorCode:      "ErrPlaceQueryParamMissing",
		Message:        "Place query parameter is missing",
	}
	ErrIdPathParamMissing = &svcerr{
		Id:             "90ff51073784187a4d2225ac1795e23e",
		HttpStatusCode: 400,
		GrpcStatusCode: 3,
		ErrorCode:      "ErrIdPathParamMissing",
		Message:        "Id path parameter is missing",
	}
	ErrUserIdQueryParamMissing = &svcerr{
		Id:             "62d0eaa6dca62337733ce64729fca6df",
		HttpStatusCode: 400,
		GrpcStatusCode: 3,
		ErrorCode:      "ErrUserIdQueryParamMissing",
		Message:        "User ID query parameter is missing",
	}
)

var (
	_ Error = ErrTextQueryParamMissing
	_ Error = ErrPlaceQueryParamMissing
	_ Error = ErrIdPathParamMissing
	_ Error = ErrUserIdQueryParamMissing
)

type svcerr struct {
	Id             string `json:"id"`
	HttpStatusCode int    `json:"http_status_code"`
	GrpcStatusCode int    `json:"grpc_status_code"`
	ErrorCode      string `json:"error_code"`
	Message        string `json:"message"`
}

func (e *svcerr) Error() string {
	return e.Message
}

func (e *svcerr) GetId() string {
	return e.Id
}

func (e *svcerr) GetHttpStatusCode() int {
	return e.HttpStatusCode
}

func (e *svcerr) GetGrpcStatusCode() int {
	return e.GrpcStatusCode
}

func (e *svcerr) GetErrorCode() string {
	return e.ErrorCode
}

func (e *svcerr) GetMessage() string {
	return e.Message
}

func (e *svcerr) WithCustomMessage(msg string) Error {
	newE := *e
	newE.Message = msg
	return &newE
}
